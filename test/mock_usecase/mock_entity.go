// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/i_entity_repository.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	database "github.com/ttaki/go-clean-architecture-template/internal/repository/database"
	model "github.com/ttaki/go-clean-architecture-template/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEntityRepository is a mock of EntityRepository interface.
type MockEntityRepository struct {
	ctrl     *gomock.Controller
	recorder *MockEntityRepositoryMockRecorder
}

// MockEntityRepositoryMockRecorder is the mock recorder for MockEntityRepository.
type MockEntityRepositoryMockRecorder struct {
	mock *MockEntityRepository
}

// NewMockEntityRepository creates a new mock instance.
func NewMockEntityRepository(ctrl *gomock.Controller) *MockEntityRepository {
	mock := &MockEntityRepository{ctrl: ctrl}
	mock.recorder = &MockEntityRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEntityRepository) EXPECT() *MockEntityRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockEntityRepository) Delete(arg0 database.Base) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEntityRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEntityRepository)(nil).Delete), arg0)
}

// FindAll mocks base method.
func (m *MockEntityRepository) FindAll() ([]model.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]model.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockEntityRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockEntityRepository)(nil).FindAll))
}

// FindAllFull mocks base method.
func (m *MockEntityRepository) FindAllFull(arg0 *model.EntityQuery) ([]model.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllFull", arg0)
	ret0, _ := ret[0].([]model.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllFull indicates an expected call of FindAllFull.
func (mr *MockEntityRepositoryMockRecorder) FindAllFull(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllFull", reflect.TypeOf((*MockEntityRepository)(nil).FindAllFull), arg0)
}

// FindByID mocks base method.
func (m *MockEntityRepository) FindByID(arg0 int) (model.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(model.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockEntityRepositoryMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockEntityRepository)(nil).FindByID), arg0)
}

// FindFullByID mocks base method.
func (m *MockEntityRepository) FindFullByID(arg0 int) (model.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFullByID", arg0)
	ret0, _ := ret[0].(model.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFullByID indicates an expected call of FindFullByID.
func (mr *MockEntityRepositoryMockRecorder) FindFullByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFullByID", reflect.TypeOf((*MockEntityRepository)(nil).FindFullByID), arg0)
}

// Store mocks base method.
func (m *MockEntityRepository) Store(arg0 database.Base) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store.
func (mr *MockEntityRepositoryMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockEntityRepository)(nil).Store), arg0)
}

// Update mocks base method.
func (m *MockEntityRepository) Update(arg0 database.Base) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockEntityRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEntityRepository)(nil).Update), arg0)
}
